from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from src.data_base import Database


def menu() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()

    keyboard = [
        "üìù –î–æ–¥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫ üìí",
        "üò± –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—ñ–¥–≥—É–∫ üò±",
        "üìã –ü—Ä–æ –±–æ—Ç–∞ üìã",
        "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìâ",
    ]

    for button in keyboard:
        builder.add(KeyboardButton(text=button))

    return builder.adjust(2).as_markup(resize_keyboard=True)


def feedback_choose() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()

    keyboard = [
        "üë®‚Äçüè´ –í–∏–∫–ª–∞–¥–∞—á—ñ üë©‚Äçüè´",
        "üìö –ü—Ä–µ–¥–º–µ—Ç–∏ üìö",
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ‚Ü©Ô∏è",
        "üè´ –ö–æ–ª–µ–¥–∂ üîî",
    ]

    for button in keyboard:
        builder.add(KeyboardButton(text=button))

    return builder.adjust(2).as_markup(resize_keyboard=True)


def feedback_review_choose() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    builder.add(
        InlineKeyboardButton(
            text="üë®‚Äçüè´ –í–∏–∫–ª–∞–¥–∞—á—ñ üë©‚Äçüè´", callback_data="teacher"
        )
    )
    builder.add(
        InlineKeyboardButton(text="üìö –ü—Ä–µ–¥–º–µ—Ç–∏ üìö", callback_data="subject")
    )
    builder.add(
        InlineKeyboardButton(text="–°—Ö–æ–≤–∞—Ç–∏ ‚ùå", callback_data="–°—Ö–æ–≤–∞—Ç–∏ ‚ùå")
    )
    builder.add(
        InlineKeyboardButton(text="üè´ –ö–æ–ª–µ–¥–∂ üîî", callback_data="college")
    )

    return builder.adjust(2).as_markup(resize_keyboard=True)


def teacher() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    keyboard = [
        "–†—É—Å–ª–∞–Ω –¶–∞–ª—å-–¶–∞–ª—å–∫–æ",
        "–ê–Ω–¥—Ä—ñ–π –ù–∞–∑–∞—Ä–æ–≤",
        "–ë–æ–≥–¥–∞–Ω –í–∞—â—É–∫",
        "–ù–∞–∑–∞–¥ <-",
        "–î–∞–ª—ñ ->",
        "–°—Ö–æ–≤–∞—Ç–∏ ‚ùå",
    ]

    for button in keyboard:
        builder.add(InlineKeyboardButton(text=button, callback_data=button))

    return builder.adjust(2).as_markup(resize_keyboard=True)


def dryga_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    keyboard = [
        "–ü–µ–¥–∞–≥–æ–≥—ñ–∫–∞",
        "–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞",
        "–Ü—Å—Ç–æ—Ä—ñ—è",
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
        "–§—ñ–∑–∏–∫–∞",
        "–ù–∞–∑–∞–¥ <-",
        "–î–∞–ª—ñ->",
        "–°—Ö–æ–≤–∞—Ç–∏ ‚ùå",
    ]

    for button in keyboard:
        builder.add(InlineKeyboardButton(text=button, callback_data=button))

    return builder.adjust(2).as_markup(resize_keyboard=True)


async def get_feedback_by_selection(
    selection: str, count: int
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    db = await Database.setup()
    all_feedback = await db.get_feedback_by_selection(selection, count)
    print(all_feedback)
    next_feedback = await db.get_feedback_by_selection(selection, count + 1)
    print(next_feedback)
    sizes = [1] * len(all_feedback) + [2] + [1]
    print(sizes)

    for button in all_feedback:
        button_text = f"{button[1][:10]}..."
        builder.add(
            InlineKeyboardButton(
                text=button_text, callback_data="SEE FEEDBACK " + button[0]
            )
        )

    if count != 1:
        builder.add(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ " + selection
            )
        )
    if len(next_feedback) > 0:
        builder.add(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è " + selection
            )
        )

    builder.add(
        InlineKeyboardButton(text="–°—Ö–æ–≤–∞—Ç–∏ ‚ùå", callback_data="–°—Ö–æ–≤–∞—Ç–∏ ‚ùå")
    )

    return builder.adjust(*sizes).as_markup(resize_keyboard=True)
